{
  "name": "Pyfcm",
  "tagline": "Python client for FCM - Firebase Cloud Messaging (Android & iOS)",
  "body": "*****\r\nPyFCM\r\n*****\r\n|version| |license| \r\n\r\nPython client for FCM - Firebase Cloud Messaging (Android & iOS)\r\n\r\nFirebase Cloud Messaging (FCM) is the new version of GCM. It inherits the reliable and scalable GCM infrastructure, plus new features. GCM users are strongly recommended to upgrade to FCM.\r\n\r\nUsing FCM, you can notify a client app that new email or other data is available to sync. You can send notifications to drive user reengagement and retention. For use cases such as instant messaging, a message can transfer a payload of up to 4KB to a client app.\r\n\r\nFor more information, visit: https://firebase.google.com/docs/cloud-messaging/\r\n\r\n\r\nLinks\r\n=====\r\n\r\n- Project: https://github.com/olucurious/pyfcm\r\n- PyPi: https://pypi.python.org/pypi/pyfcm/\r\n\r\n\r\nQuickstart\r\n==========\r\n\r\nInstall using pip:\r\n\r\n\r\n::\r\n\r\n    pip install pyfcm\r\n\r\n    OR\r\n\r\n    pip install git+https://github.com/olucurious/PyFCM.git\r\n\r\nPyFCM supports Android and iOS.\r\n\r\nExamples\r\n--------\r\n\r\nSend notifications using the ``FCMNotification`` class:\r\n\r\n.. code-block:: python\r\n\r\n    # Send to single device.\r\n    from pyfcm import FCMNotification\r\n\r\n    push_service = FCMNotification(api_key=\"<api-key>\")\r\n\r\n    # OR initialize with proxies\r\n\r\n    proxy_dict = {\r\n              \"http\"  : \"http://127.0.0.1\",\r\n              \"https\" : \"http://127.0.0.1\",\r\n            }\r\n    push_service = FCMNotification(api_key=\"<api-key>\", proxy_dict=proxy_dict)\r\n\r\n    # Your api-key can be gotten from:  https://console.firebase.google.com/project/<project-name>/settings/cloudmessaging\r\n\r\n    registration_id = \"<device registration_id>\"\r\n    message_title = \"Uber update\"\r\n    message_body = \"Hi john, your customized news for today is ready\"\r\n    result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=message_body)\r\n\r\n    # Send to multiple devices by passing a list of ids.\r\n    registration_ids = [\"<device registration_id 1>\", \"<device registration_id 2>\", ...]\r\n    message_title = \"Uber update\"\r\n    message_body = \"Hope you're having fun this weekend, don't forget to check today's news\"\r\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_title=message_title, message_body=message_body)\r\n\r\n    print result\r\n\r\nSend a data message.\r\n\r\n.. code-block:: python\r\n\r\n    # With FCM, you can send two types of messages to clients:\r\n    # 1. Notification messages, sometimes thought of as \"display messages.\"\r\n    # 2. Data messages, which are handled by the client app.\r\n\r\n    # Client app is responsible for processing data messages. Data messages have only custom key-value pairs. (Python dict)\r\n    # Data messages let developers send up to 4KB of custom key-value pairs.\r\n\r\n    # Sending a notification with data message payload\r\n    data_message = {\r\n        \"Nick\" : \"Mario\",\r\n        \"body\" : \"great match!\",\r\n        \"Room\" : \"PortugalVSDenmark\"\r\n    }\r\n    # To multiple devices\r\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message_body, data_message=data_message)\r\n    # To a single device\r\n    result = push_service.notify_single_device(registration_id=registration_id, message_body=message_body, data_message=data_message)\r\n\r\n    # Sending a data message only payload, do NOT include message_body\r\n    # To multiple devices\r\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, data_message=data_message)\r\n    # To a single device\r\n    result = push_service.notify_single_device(registration_id=registration_id, data_message=data_message)\r\n\r\n    # Use notification messages when you want FCM to handle displaying a notification on your app's behalf.\r\n    # Use data messages when you just want to process the messages only in your app.\r\n    # PyFCM can send a message including both notification and data payloads.\r\n    # In such cases, FCM handles displaying the notification payload, and the client app handles the data payload.\r\n\r\nSend a low priority message.\r\n\r\n.. code-block:: python\r\n\r\n    # The default is low_priority == False\r\n    result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message, low_priority=True)\r\n\r\nSending a message to a topic.\r\n\r\n.. code-block:: python\r\n\r\n    # Send a message to devices subscribed to a topic.\r\n    result = push_service.notify_topic_subscribers(topic_name=\"news\", message_body=message)\r\n\r\n    # Conditional topic messaging\r\n    topic_condition = \"'TopicA' in topics && ('TopicB' in topics || 'TopicC' in topics)\"\r\n    result = push_service.notify_topic_subscribers(message_body=message, condition=topic_condition)\r\n    # FCM first evaluates any conditions in parentheses, and then evaluates the expression from left to right.\r\n    # In the above expression, a user subscribed to any single topic does not receive the message. Likewise,\r\n    # a user who does not subscribe to TopicA does not receive the message. These combinations do receive it:\r\n    # TopicA and TopicB\r\n    # TopicA and TopicC\r\n    # Conditions for topics support two operators per expression, and parentheses are supported.\r\n    # For more information, check: https://firebase.google.com/docs/cloud-messaging/topic-messaging\r\n\r\nOther argument options\r\n\r\n::\r\n\r\n    \r\n    collapse_key (str, optional): Identifier for a group of messages\r\n        that can be collapsed so that only the last message gets sent\r\n        when delivery can be resumed. Defaults to `None`.\r\n    delay_while_idle (bool, optional): If `True` indicates that the\r\n        message should not be sent until the device becomes active.\r\n    time_to_live (int, optional): How long (in seconds) the message\r\n        should be kept in FCM storage if the device is offline. The\r\n        maximum time to live supported is 4 weeks. Defaults to ``None``\r\n        which uses the FCM default of 4 weeks.\r\n    low_priority (boolean, optional): Whether to send notification with\r\n        the low priority flag. Defaults to `False`.\r\n    restricted_package_name (str, optional): Package name of the\r\n        application where the registration IDs must match in order to\r\n        receive the message. Defaults to `None`.\r\n    dry_run (bool, optional): If `True` no message will be sent but\r\n        request will be tested.\r\n\r\nAccess response data.\r\n\r\n.. code-block:: python\r\n\r\n    # Response from FCM Server.\r\n    print result['multicast_id'] #Unique ID (number) identifying the multicast message.\r\n    print result['success'] #Number of messages that were processed without an error.\r\n    print result['failure'] #Number of messages that could not be processed.\r\n    print result['canonical_ids'] #Number of results that contain a canonical registration token.\r\n    print result['results'] #Array of objects representing the status of the messages processed.\r\n\r\n    # The result objects are listed in the same order as the request (i.e., for each registration ID in the request,\r\n    # its result is listed in the same index in the response).\r\n    # message_id: String specifying a unique ID for each successfully processed message.\r\n    # registration_id: Optional string specifying the canonical registration token for the client app that the message\r\n    # was processed and sent to. Sender should use this value as the registration token for future requests. Otherwise,\r\n    # the messages might be rejected.\r\n    # error: String specifying the error that occurred when processing the message for the recipient\r\n    \r\n    \r\nLicense\r\n-------\r\n\r\nThe MIT License (MIT). Please see LICENSE.rst for more information.\r\n\r\n\r\n::\r\n\r\n    Copyright (c) 2016 Emmanuel Adegbite\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\r\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n    is furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\r\n    IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n.. |version| image:: http://img.shields.io/pypi/v/pyfcm.svg?style=flat-square\r\n    :target: https://pypi.python.org/pypi/pyfcm/\r\n\r\n.. |license| image:: http://img.shields.io/pypi/l/pyfcm.svg?style=flat-square\r\n    :target: https://pypi.python.org/pypi/pyfcm/\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}